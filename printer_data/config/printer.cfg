[include shell_command.cfg]
## Voron Design VORON2 250/300/350mm Spider TMC2209 UART config

## *** THINGS TO CHANGE/CHECK: ***
## MCU paths                           [mcu] section
## Thermistor types                    [extruder] and [heater_bed] sections - See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types
## Bed sensor_pin                      [heater_bed] section
## Fan pins                            [heater_fan hotend_fan] amd [fan] sections
## Z Endstop Switch location           [safe_z_home] section
## Homing end position                 [gcode_macro G32] section
## Z Endstop Switch  offset for Z0     [stepper_z] section
## Probe points                        [quad_gantry_level] section
## Min & Max gantry corner postions    [quad_gantry_level] section
## PID tune                            [extruder] and [heater_bed] sections
## Fine tune E steps                   [extruder] section

[include mainsail.cfg]
[exclude_object]

[mcu]
##  Obtain definition by "ls -l /dev/serial/by-id/" 
##--------------------------------------------------------------------
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_5C0038000F51303530323539-if00

## Uncomment below if you're using the Raspberry uart0 to communicate with Spider
#restart_method: command

[printer]
kinematics: corexy
max_velocity: 300  
max_accel: 3000                 #Max 4000
max_z_velocity: 15          #Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
square_corner_velocity: 5.0

#####################################################################
#      X/Y Stepper Settings
#####################################################################

##  Connected to X-MOT (B Motor)
[stepper_x]
step_pin: PE11
dir_pin: PE10
enable_pin: !PE9
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: ^PA1
position_min: 0

##--------------------------------------------------------------------

## for 300mm build
position_endstop: 300
position_max: 300

##--------------------------------------------------------------------
homing_speed: 25   #Max 100
homing_retract_dist: 5
homing_positive_dir: true

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_x]
uart_pin: PE7
interpolate: False
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0
# uart_address: 3  # tested 0,1,2,3

##  Connected to Y-MOT (A Motor)
[stepper_y]
step_pin: PD8
dir_pin: PB12
enable_pin: !PD9
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: ^PA2
position_min: 0
##--------------------------------------------------------------------

## for 300mm build
position_endstop: 300
position_max: 300

##--------------------------------------------------------------------
homing_speed: 25  #Max 100
homing_retract_dist: 5
homing_positive_dir: true

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_y]
uart_pin: PE15
interpolate: False
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

#####################################################################
#   Z Stepper Settings
#####################################################################

## In Z-MOT Position
## Z0 Stepper - Front Left
[stepper_z]
step_pin: PD14
dir_pin: PD13
enable_pin: !PD15
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32
##  In Z- Position
endstop_pin: ^PA0
##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##  Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
#position_endstop: -0.5
##--------------------------------------------------------------------

## below for 300mm build
position_max: 260

##--------------------------------------------------------------------
position_min: -5
homing_speed: 8
second_homing_speed: 3
homing_retract_dist: 3

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z]
uart_pin: PD10
interpolate: False
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##  In E1-MOT Position
##  Z1 Stepper - Rear Left
[stepper_z1]
step_pin: PE6
dir_pin: !PC13
enable_pin: !PE5
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z1]
uart_pin: PC14
interpolate: False
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##  In E2-MOT Position
##  Z2 Stepper - Rear Right
[stepper_z2]
step_pin: PE2
dir_pin: PE4
enable_pin: !PE3
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z2]
uart_pin: PC15
interpolate: False
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##  In E3-MOT Position
##  Z3 Stepper - Front Right
[stepper_z3]
step_pin: PD12
dir_pin: !PC4
enable_pin: !PE8
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z3]
uart_pin: PA15
interpolate: False
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

#####################################################################
#   Extruder
#####################################################################

##  In E0-MOT Position
[extruder]
step_pin: PD5
dir_pin: !PD6
enable_pin: !PD4
##  Update value below when you perform extruder calibration
##  If you ask for 100mm of filament, but in reality it is 98mm:
##  rotation_distance = <previous_rotation_distance> * <actual_extrude_distance> / 100
##  22.6789511 is a good starting point
rotation_distance: 22.297700689619773272 # getting about 98/100
##  Update Gear Ratio depending on your Extruder Type
##  Use 50:10 for Stealthburner/Clockwork 2
##  Use 50:17 for Afterburner/Clockwork (BMG Gear Ratio)
##  Use 80:20 for M4, M3.1
gear_ratio: 50:10
microsteps: 32
full_steps_per_rotation: 200    #200 for 1.8 degree, 400 for 0.9 degree
nozzle_diameter: 0.400
filament_diameter: 1.75
##      In E0 OUT Position
heater_pin: PB15
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for NTC 100k 3950 thermistors
sensor_type: Generic 3950
sensor_pin: PC0
min_temp: 10
max_temp: 270
max_power: 1.0
min_extrude_temp: 170
#control = pid
#pid_kp = 26.213
#pid_ki = 1.304
#pid_kd = 131.721
##  Try to keep pressure_advance below 1.0
pressure_advance: 0.025
##  Default is 0.040, leave stock
pressure_advance_smooth_time: 0.040

##  In E0-MOT Position
##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 extruder]
uart_pin: PD7
interpolate: false
run_current: 0.5
sense_resistor: 0.110
stealthchop_threshold: 0

#####################################################################
#   Bed Heater
#####################################################################
##  SSR Pin - In BED OUT position
[heater_bed]
heater_pin: PB4
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for Keenovo heaters
sensor_type: Generic 3950

##--------------------------------------------------------------------
##  Select the option that matches your board
#sensor_pin: PC3 # Spider 1.0 & 1.1
sensor_pin: PB0 # Spider 2.2
##--------------------------------------------------------------------

##  Adjust max_power so it doesn't exceed the SSR rating. The Omron G3NA-210B-DC5 SSR is rated at 4 amps without a heatsink.
##  The formula is "4 / (Wattage_of_bed_heater / Mains_voltage) = max_power"
##  If max_power is greater than 1.0, use 1.0
max_power: 0.6
min_temp: 0
max_temp: 120
#control: pid
#pid_kp: 58.437
#pid_ki: 2.347
#pid_kd: 363.769

#####################################################################
#   Probe
#####################################################################

##  This probe is not used for Z height, only Quad Gantry Leveling
##  In Z+ position
#Replaced with Klicky suggestions
[probe]
##  If your probe is NO instead of NC, change pin to ^!PA3
pin: ^PA3
x_offset: 0
y_offset: 19.75 # 25.0
#z_offset: 3.9 # 0
speed: 5 
samples: 5
samples_result: median
sample_retract_dist: 2.0 # 3.0
samples_tolerance: 0.025 # 0.01 # 0.006
samples_tolerance_retries: 3
#pin: P1.26
#x_offset: 0
#y_offset: 19.75
#z_offset: 6.42
#speed: 5
#samples:3 
#samples_result: median
#sample_retract_dist: 2.0
#samples_tolerance: 0.01
#samples_tolerance_retries: 3

#####################################################################
#   Fan Control
#####################################################################

##  Hotend Fan - FAN0 Connector
[heater_fan hotend_fan]
##  Select pin for your Spider board
##--------------------------------------------------------------------
# pin: PB0   # Spider 1.0 & 1.1
 pin: PA13  # Spider 2.2
##--------------------------------------------------------------------
max_power: 1.0
#kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
##  If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0

##  Print Cooling Fan - FAN1 Connector
[fan]
##--------------------------------------------------------------------
#pin: PB1   # Spider 1.0 & 1.1
pin: PA14  # Spider 2.2
##--------------------------------------------------------------------
#max_power: 1.0
#kick_start_time: 0.5
##  Depending on your fan, you may need to increase this value
##  if your fan will not start. Can change cycle_time (increase)
##  if your fan is not able to slow down effectively
off_below: 0.10

##  Controller fan - FAN2 Connector
[heater_fan controller_fan]
pin: PB2
#kick_start_time: 0.5
heater: heater_bed
heater_temp: 45.0

##  Exhaust fan - In E2 OUT Positon
#[heater_fan exhaust_fan]
#pin: PB3
#max_power: 1.0
#shutdown_speed: 0.0
##kick_start_time: 0.5
#heater: heater_bed
#heater_temp: 60
#fan_speed: 1.0

#####################################################################
#   LED Control
#####################################################################

##  Chamber Lighting - In E1 OUT Position
#[output_pin caselight]
#pin: PC8
#pwm: true
#shutdown_value: 0
#cycle_time: 0.01

#####################################################################
#   Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 1800

# removed because of klicky
# [safe_z_home]
##  XY Location of the Z Endstop Switch
##  Update -10,-10 to the XY coordinates of your endstop pin 
##  (such as 157,305) after going through Z Endstop Pin
##  Location Definition step.
# home_xy_position:207,300
# speed:100
# z_hop:10

##  Use QUAD_GANTRY_LEVEL to level a gantry.
##  Min & Max gantry corners - measure from nozzle at MIN (0,0) and 
##  MAX (250, 250), (300,300), or (350,350) depending on your printer size
##  to respective belt positions
[quad_gantry_level]

#--------------------------------------------------------------------  
##  Gantry Corners for 300mm Build
##  Uncomment for 300mm build
gantry_corners:
   -60,-10
   360,370
##  Probe points
points:
   50,25
   50,225
   250,225
   250,25

#--------------------------------------------------------------------
speed: 300
horizontal_move_z: 10
retries: 5
retry_tolerance: 0.01 # 0.0075
max_adjust: 10

[bed_mesh]
speed: 300
horizontal_move_z: 15
probe_count: 3, 3
##--------------------------------------------------------------------

## for 300mm build
mesh_min: 40, 40
mesh_max: 260,260
zero_reference_position: 150,150 #for use with stock z endstop

##--------------------------------------------------------------------
fade_start: 0.6
fade_end: 10.0
probe_count: 5,5 # Values should be odd, so one point is directly at bed center
algorithm: bicubic


#####################################################################
#   Displays
#####################################################################

#--------------------------------------------------------------------

#   mini12864 LCD Display
[display]
lcd_type: uc1701
cs_pin: PC11
a0_pin: PD2
rst_pin: PC10
encoder_pins: ^PC6,^PC7
click_pin: ^!PA8
contrast: 63
#spi_bus: spi1
spi_software_mosi_pin: PA7
spi_software_miso_pin: PA6
spi_software_sclk_pin: PA5

#   To control Neopixel RGB in mini12864 display
[neopixel fysetc_mini12864]
pin: PC12
chain_count: 3
initial_RED: 0.1
initial_GREEN: 0.5
initial_BLUE: 0.0
color_order: RGB

#   Set RGB values on boot up for each Neopixel. 
#   Index 1 = display, Index 2 and 3 = Knob
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
        SET_LED LED=fysetc_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
        SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
        SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 

#--------------------------------------------------------------------

#####################################################################
#   Macros
#####################################################################
[include klicky-probe.cfg]
[include klicky-bed-mesh-calibrate.cfg]
# [include stealthburner_leds.cfg]

[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30  

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32

# ----------------------------------------- START PRINT_START ----------------------------------------- #
#####################################################################
#   print_start macro
#####################################################################
[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  M140 S{target_bed} 
  M104 S{target_extruder-50}
  
 # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  ;STATUS_HOMING                                                # Sets SB-leds to homing-mode
  G28                                                           # Full home (XYZ)
  G90                                                           # Absolut position
  SET_DISPLAY_TEXT MSG="Homing 1/7" 

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR                                                # Clears old saved bed mesh (if any)

  {% if params.BED|int < target_bed - 10 %}
      M140 S{target_bed} 
      SET_DISPLAY_TEXT MSG="Soaking for 5 min: {target_bed}c 2/7" 
      G4 P300000  
  {% endif %}

  SET_DISPLAY_TEXT MSG="Heating Bed: {target_bed}c 2/7"         # Displays info
  M190 S{target_bed}                                            # Sets the target temp for the bed

  Attach_Probe_Lock                                             # attach and lock the probe, preveting docking
  
  ##  Uncomment for V2 (Quad gantry level AKA QGL)
  SET_DISPLAY_TEXT MSG="QGL 4/7"                                # Displays info
  ;STATUS_LEVELING                                              # Sets SB-leds to leveling-mode
  quad_gantry_level                                             # Levels the buildplate via QGL

  SET_DISPLAY_TEXT MSG="Heating Nozzle: {target_bed}c 4.5/7"    # Displays info
  M109 S{target_extruder-50}                                    # Heats the nozzle to target - 50C

  # Heating/cleaning the nozzle to 150 degrees. This helps with getting a correct Z-home
  CLEAN_NOZZLE
  G28 Z                                                         # Homes Z again after QGL

  SET_DISPLAY_TEXT MSG="Calibrating Z-offset 5/7"               # Displays info
  CALIBRATE_Z                                                   # Calibrates Z-offset with klicky
  # Adjust the G-Code z-offset if needed, in slicer use PRINT_START Z_ADJUST=0.0
  SET_GCODE_OFFSET Z_ADJUST={params.Z_ADJUST|default(0.0)|float} MOVE=1

  ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh ADAPTIVE 6/7"                  # Displays info
  ;ATTACH_PROBE
  ;STATUS_MESHING                                               # Sets SB-leds to bed mesh-mode
  BED_MESH_CALIBRATE PROFILE=adaptive ADAPTIVE=1
  ;DOCK_PROBE

  Dock_Probe_Unlock                                             # Dock and unlock the probe, it can finally rest
  
  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  ;STATUS_HEATING                                               # Sets SB-leds to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Purge line 7/7"                         # Displays info
  CLEAN_NOZZLE
  ;STATUS_PRINTING                                              # Sets SB-leds to printing-mode
  G0 X{x_wait - 50} Y4 F10000                                   # Moves to starting point
  G0 Z0.4                                                       # Raises Z to 0.4
  G91                                                           # Incremental positioning 
  G1 X100 E20 F1000                                             # Purge line
  G90                                                           # Absolut position
  SET_DISPLAY_TEXT MSG="Printing"                               # Displays info
# ----------------------------------------- END PRINT_START ----------------------------------------- #


[gcode_macro MOVE_TO_CHANGE_POSITION]
gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}

 G1 Z25 F6000
 G1 X150 F6000
 G1 Y10 F6000


# ----------------------------------------- START CLEAN_NOZZLE ----------------------------------------- #
[gcode_macro CLEAN_NOZZLE]
variable_start_x: 280
variable_start_y: 300
variable_start_z: 3
variable_wipe_dist: -50
variable_wipe_qty: 10
variable_wipe_spd: 200
variable_raise_distance: 30

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 
 G90                                            ; absolute positioning
 ## Move nozzle to start position
 G1 X{start_x} Y{start_y} F6000
 G1 Z{start_z} F1500

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   G1 X{start_x + wipe_dist} F{wipe_spd * 60}
   G1 X{start_x} F{wipe_spd * 60}
 {% endfor %}

 ## Raise nozzle
 G1 Z{raise_distance}
 # ----------------------------------------- END CLEAN_NOZZLE ----------------------------------------- #

[z_calibration]
  nozzle_xy_position:   207,300
  switch_xy_offsets:    -4, -16 # relative
  bed_xy_position:      150,150
  switch_offset:        0.49        # Remember, the smaller the switch-offset, the further the nozzle is away from the bed!
  # offset_margins: -1.0,1.0  # sets a range the offset is good in
  start_gcode:          Attach_Probe
  # before_switch_gcode:  CLEAN_NOZZLE
  end_gcode:            Dock_Probe
   

 # ----------------------------------------- START PRINT_END ----------------------------------------- #
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}

    SET_LED LED=fysetc_mini12864 RED=0 GREEN=1 BLUE=0 INDEX=1 TRANSMIT=0
    SET_LED LED=fysetc_mini12864 RED=0 GREEN=1 BLUE=0 INDEX=2 TRANSMIT=0
    SET_LED LED=fysetc_mini12864 RED=0 GREEN=1 BLUE=0 INDEX=3 

    SET_DISPLAY_TEXT MSG="Finished print"               # Displays info
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    ;G1 E-5.0 F1800                 ; retract filament
    M83 G1 E-15 F60                ; Move to ooze prevention position
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR

    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0
# ----------------------------------------- END PRINT_END ----------------------------------------- #

# ----------------------------------------- START PAUSE ----------------------------------------- #
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        ; SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}
# ----------------------------------------- END PAUSE ----------------------------------------- #
    
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        ; SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                        ; enable filament sensor
        #INITIAL_RGB                                                                 ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro M600]
gcode:
    SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0
    SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
    SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 
    PAUSE                ; Pause

# TODO: Fix casing after front-ends get fixed
[gcode_macro LOAD_FILAMENT]
description: Loads filament to the extruder.
  Usage: LOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
                       [EXTRUDER=<extruder>] [MINIMUM=<temperature>]
                       [BEEPS=<beep count on completion>]
gcode:
  _LOAD_UNLOAD LOAD=1{% for k in params
    %}{' '~k~'="'~params[k]~'"'}{% endfor %}

  # Dummy argument block for Mainsail
  {% set dummy = None if True else "
  M109
  {% set dummy = params.LENGTH|default(variable_load_length)|float %}
  {% set dummy = params.SPEED|default(variable_load_speed)|float %}
  {% set dummy = params.EXTRUDER|default(current extruder) %}
  {% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
  {% set dummy = params.BEEPS|default(10)|int %}
  " %} # End argument block for Mainsail

[gcode_macro UNLOAD_FILAMENT]
gcode:
  M83 # extrude 1 mm at 10ms
  G1 E1 F600
  M83 # retract 50 mm at 10ms
  G1 E-1 F600
  M83 # retract 50 mm at 10ms
  G1 E-1 F600

# TODO: Fix casing after front-ends get fixed
#[gcode_macro UNLOAD_FILAMENT]
#description: Unloads filament from the extruder.
#  Usage: UNLOAD_FILAMENT [LENGTH=<distance>] [SPEED=<speed>]
                         #[EXTRUDER=<extruder>] [MINIMUM=<temperature>]
                         #[BEEPS=<beep count on completion>]
#gcode:
#  _LOAD_UNLOAD LOAD=0{% for k in params
#    %}{' '~k~'="'~params[k]~'"'}{% endfor %}#

  # Dummy argument block for Mainsail
#  {% set dummy = None if True else "
#  M109
#  {% set dummy = params.LENGTH|default(variable_load_length)|float %}
#  {% set dummy = params.SPEED|default(variable_load_speed)|float %}
#  {% set dummy = params.EXTRUDER|default(default extruder) %}
#  {% set dummy = params.MINIMUM|default(min_extrude_temp)|int %}
#  {% set dummy = params.BEEPS|default(10)|int %}
#  " %} # End argument block for Mainsail

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 34.253
#*# pid_ki = 1.320
#*# pid_kd = 222.219
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 28.314
#*# pid_ki = 2.221
#*# pid_kd = 90.250
#*#
#*# [stepper_z]
#*# position_endstop = -0.269
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	-0.103125, -0.045625, 0.011250, -0.025625, -0.111875
#*# 	-0.117500, -0.061250, -0.027500, -0.053125, -0.088125
#*# 	-0.103750, -0.070625, 0.000000, -0.011250, -0.076250
#*# 	-0.116875, -0.060000, -0.058125, -0.031250, -0.061875
#*# 	-0.100000, -0.060000, -0.038125, -0.068125, -0.108750
#*# x_count = 5
#*# y_count = 5
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 40.0
#*# max_x = 260.0
#*# min_y = 40.0
#*# max_y = 260.0
#*#
#*# [probe]
#*# z_offset = 4.026
